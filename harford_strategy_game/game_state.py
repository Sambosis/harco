"""
game_state.py

Author
------
Harford County Clash core team – Auto-generated by ChatGPT

Summary
-------
Domain-level dataclasses and the authoritative `GameState` container used by
all other modules (referee, viewer, agents).  This file purposefully contains
*no* direct I/O or randomness; it is a pure, deterministic state-transition
engine that can be unit-tested in isolation.
"""

from __future__ import annotations

from dataclasses import dataclass, field
from typing import Any, Dict, List, Mapping, MutableMapping, Optional, Sequence, Set, Tuple

# --------------------------------------------------------------------------- #
# Constants & Simple Helpers                                                  #
# --------------------------------------------------------------------------- #

GRID_WIDTH: int = 10
GRID_HEIGHT: int = 10

# Cardinal (4-direction) deltas used by movement & adjacency checks.
_DIRECTION_DELTAS: Dict[str, Tuple[int, int]] = {
    "N": (0, -1),
    "S": (0, 1),
    "E": (1, 0),
    "W": (-1, 0),
}


def _manhattan(a: "Coord", b: "Coord") -> int:
    """Return Manhattan distance between two coordinates."""
    return abs(a.x - b.x) + abs(a.y - b.y)


# --------------------------------------------------------------------------- #
# Domain-level immutable value objects                                        #
# --------------------------------------------------------------------------- #


@dataclass(frozen=True, slots=True)
class Coord:
    """
    Represents an (x, y) coordinate on the 10 × 10 grid.
    The origin (0, 0) is the upper-left corner.
    """

    x: int
    y: int

    # Enable use inside `set` / `dict` without additional boilerplate.
    def __hash__(self) -> int:  # noqa: D401 – simple wrapper
        return (self.x << 4) ^ self.y  # 4 bits are enough for 0-15


@dataclass(frozen=True, slots=True)
class Tile:
    """
    Immutable description of a single map cell.
    """

    coord: Coord
    name: str
    terrain_type: str
    traversable: bool = True

    def to_dict(self) -> Dict[str, Any]:
        return {
            "coord": {"x": self.coord.x, "y": self.coord.y},
            "name": self.name,
            "terrain_type": self.terrain_type,
            "traversable": self.traversable,
        }


@dataclass(slots=True)
class Unit:
    """
    Mutable combat entity controlled by a faction commander.
    """

    id: str
    team_id: str
    coord: Coord
    hp: int
    attack_power: int

    # ------------------------------------------------------------------ #
    # Convenience helpers for (de)serialisation                          #
    # ------------------------------------------------------------------ #
    def is_alive(self) -> bool:
        return self.hp > 0

    def to_public_dict(self) -> Dict[str, Any]:
        """
        Public representation (includes HP but not attack power).
        """
        return {
            "id": self.id,
            "team_id": self.team_id,
            "coord": {"x": self.coord.x, "y": self.coord.y},
            "hp": self.hp,
        }


# --------------------------------------------------------------------------- #
# Game-wide mutable state container                                           #
# --------------------------------------------------------------------------- #


@dataclass(slots=True)
class GameState:
    """
    Aggregates all mutable entities for a single simulation instance.
    """

    tiles: List[Tile]
    units: Dict[str, Unit]
    team_hqs: Dict[str, Coord]
    turn_counter: int = 0
    visibility_radius: int = 2

    # Cached coordinate -> tile lookup (constructed lazily).
    _coord_lookup: Dict[Tuple[int, int], Tile] = field(init=False, repr=False)

    # --------------------------------------------------------------------- #
    # dataclass post-processing                                             #
    # --------------------------------------------------------------------- #

    def __post_init__(self) -> None:
        self._coord_lookup = {(t.coord.x, t.coord.y): t for t in self.tiles}

    # --------------------------------------------------------------------- #
    # Public serialisation helpers                                          #
    # --------------------------------------------------------------------- #

    def serialize_public_view(self, team_id: str) -> Dict[str, Any]:
        """
        Build a view of the world visible to `team_id`.

        Enemy units that are *not* within the fog-of-war radius are omitted.
        All friendly units are always included, regardless of HP (dead units
        remain for the remainder of the turn so the agent can acknowledge
        casualties).
        """
        visible_coords: Set[Coord] = self._visible_coords_for_team(team_id)

        visible_units: List[Dict[str, Any]] = []
        for u in self.units.values():
            if not u.is_alive():
                # Include only if the owning team can see its dead unit (for bookkeeping).
                if u.team_id == team_id:
                    visible_units.append(u.to_public_dict())
                continue

            if u.team_id == team_id or u.coord in visible_coords:
                visible_units.append(u.to_public_dict())

        # The static map is fully public knowledge.
        serialized_tiles = [t.to_dict() for t in self.tiles]

        return {
            "turn": self.turn_counter,
            "team_id": team_id,
            "units": visible_units,
            "tiles": serialized_tiles,
            "hq": {
                "own": {
                    "x": self.team_hqs[team_id].x,
                    "y": self.team_hqs[team_id].y,
                },
                "enemy": {
                    "x": self._enemy_hq(team_id).x,
                    "y": self._enemy_hq(team_id).y,
                },
            },
        }

    # --------------------------------------------------------------------- #
    # Action processing                                                      #
    # --------------------------------------------------------------------- #

    def apply_actions(self, action_dict: Mapping[str, Mapping[str, Any]]) -> None:
        """
        Apply a *combined* set of actions originating from *both* factions.

        The method is deterministic – actions are normalised into an ordered
        list and processed in two phases:

            1. Movement phase (collision-free resolution).
            2. Combat phase (attacks applied simultaneously).

        Any illegal directive is converted into a no-op without raising.
        """
        # Phase 1 – collect intentions and validate.
        move_intents: Dict[str, Coord] = {}
        attack_intents: List[Tuple[str, str]] = []  # (attacker_id, target_id)

        for unit_id in sorted(action_dict.keys()):
            unit = self.units.get(unit_id)
            cmd = action_dict[unit_id]

            # Skip if unknown or dead.
            if unit is None or not unit.is_alive():
                continue

            action_type = cmd.get("action", "").lower()
            if action_type == "move":
                direction: str = str(cmd.get("direction", "")).upper()
                delta = _DIRECTION_DELTAS.get(direction)
                if delta is None:
                    continue  # invalid direction – no-op

                target = Coord(unit.coord.x + delta[0], unit.coord.y + delta[1])

                # Validate in-bounds.
                if not (0 <= target.x < GRID_WIDTH and 0 <= target.y < GRID_HEIGHT):
                    continue  # move out of bounds

                # Validate traversable.
                tile = self._coord_lookup.get((target.x, target.y))
                if tile is None or not tile.traversable:
                    continue  # cannot enter

                # Reserve intent.
                move_intents[unit_id] = target

            elif action_type == "attack":
                target_id: str = cmd.get("target_id", "")
                target_unit = self.units.get(target_id)
                if (
                    target_unit
                    and target_unit.is_alive()
                    and target_unit.team_id != unit.team_id
                    and _manhattan(unit.coord, target_unit.coord) == 1
                ):
                    attack_intents.append((unit_id, target_id))
                # else illegal, drop

            elif action_type == "pass":
                continue  # explicit no-op
            # Unrecognised action types are ignored.

        # Phase 1a – resolve movement (handle collisions).
        # If two+ units claim the same target tile, *none* move.
        target_counts: Dict[Tuple[int, int], int] = {}
        for dest in move_intents.values():
            target_counts[(dest.x, dest.y)] = target_counts.get((dest.x, dest.y), 0) + 1

        for unit_id, dest in move_intents.items():
            if target_counts[(dest.x, dest.y)] == 1:
                # Ensure destination is not currently occupied by *any* unit
                # that did not move away this phase (simultaneity assumption).
                occupied_now = {
                    (u.coord.x, u.coord.y)
                    for uid, u in self.units.items()
                    if u.is_alive() and uid != unit_id
                }
                if (dest.x, dest.y) not in occupied_now:
                    self.units[unit_id].coord = dest

        # Phase 2 – resolve attacks (all hits land simultaneously).
        damage_queue: Dict[str, int] = {}
        for attacker_id, target_id in attack_intents:
            attacker = self.units.get(attacker_id)
            target = self.units.get(target_id)
            if attacker and target and attacker.is_alive() and target.is_alive():
                damage_queue[target_id] = damage_queue.get(target_id, 0) + attacker.attack_power

        for target_id, dmg in damage_queue.items():
            target = self.units[target_id]
            target.hp -= dmg

        # Remove units whose HP <= 0 (still kept in dict for bookkeeping; agents
        # can see their own fallen units the following turn).
        # This is optional; we simply mark them dead by HP ≤ 0.

        # Turn counter is incremented by **Referee** after both factions act.
        # GameState itself does not advance it here.

    # --------------------------------------------------------------------- #
    # Victory & termination                                                  #
    # --------------------------------------------------------------------- #

    def is_team_defeated(self, team_id: str) -> bool:
        """
        A team is defeated if an enemy occupies its HQ or if every one of its
        units has HP ≤ 0.
        """
        own_hq = self.team_hqs[team_id]
        # HQ capture check.
        for u in self.units.values():
            if u.is_alive() and u.team_id != team_id and u.coord == own_hq:
                return True

        # All units dead check.
        for u in self.units.values():
            if u.team_id == team_id and u.is_alive():
                return False
        return True

    # --------------------------------------------------------------------- #
    # Helper utilities                                                       #
    # --------------------------------------------------------------------- #

    def _visible_coords_for_team(self, team_id: str) -> Set[Coord]:
        """
        Compute fog-of-war visibility tiles for `team_id`.
        """
        visible: Set[Coord] = set()
        for u in self.units.values():
            if u.team_id != team_id or not u.is_alive():
                continue
            for dx in range(-self.visibility_radius, self.visibility_radius + 1):
                rem = self.visibility_radius - abs(dx)
                for dy in range(-rem, rem + 1):
                    x, y = u.coord.x + dx, u.coord.y + dy
                    if 0 <= x < GRID_WIDTH and 0 <= y < GRID_HEIGHT:
                        visible.add(Coord(x, y))
        return visible

    def _adjacent_coords(self, coord: Coord) -> List[Coord]:
        """
        Return N, S, E, W neighbours that are within the board bounds.
        """
        neighbours: List[Coord] = []
        for dx, dy in _DIRECTION_DELTAS.values():
            nx, ny = coord.x + dx, coord.y + dy
            if 0 <= nx < GRID_WIDTH and 0 <= ny < GRID_HEIGHT:
                neighbours.append(Coord(nx, ny))
        return neighbours

    # ------------------------------------------------------------------ #
    # Misc                                                                #
    # ------------------------------------------------------------------ #

    def _enemy_hq(self, team_id: str) -> Coord:
        """Return the opposing HQ coordinate (utility for serialisation)."""
        for tid, hq in self.team_hqs.items():
            if tid != team_id:
                return hq
        # In the unlikely case only one HQ has been registered.
        raise KeyError(f"No enemy HQ registered for team '{team_id}'.")